第五届大赛规则（软件）
1.    组别
竞赛分为：c/c++本科A组，c/c++本科B组，c/c++高职高专组，Java本科A组， Java本科B组，java高职高专组共6个组别。每位选手只能申请参加其中一个组别的竞赛。 
2.    竞赛时间

预赛时长：4小时。
决赛时长：4小时。
校内选拔赛时长（部分院校）：2小时。
 
详细赛程安排另行通知。 
3.    竞赛形式

个人赛。
全程机考。
选手机器通过局域网连接到各个考场的竞赛服务器。选手答题过程中无法访问互联网，也不允许使用本机以外的资源（如USB连接）。
以“服务器-浏览器”方式发放试题、回收选手答案。 
4.    参赛选手机器环境

机器配置：
X86 兼容机器，内存不小于1G，硬盘不小于60G
Windows NT 内核系统（WindowsXP, Windows2000等）
c/c++ 开发环境：
l  Dev-cpp 5.4.0  支持ANSI C，ANSIC++，STL
l  c/c++ API 帮助文档（中文，chm格式）
Java 开发环境：
l  JDK 1.6
l  Eclipse Helios for JavaSE
l  API 帮助文档（中文，chm格式） 
5.    试题形式

竞赛题目完全为客观题型。
根据选手所提交答案的测评结果为评分依据。
5.1.  结果填空题
l  题目描述一个具有确定解的问题。要求选手对问题的解填空。
l  不要求解题过程，不限制解题手段（可以使用任何开发语言或工具，甚至是手工计算），只要求填写最终的结果。
5.2.  代码填空题
l  题目描述一个具有确定解的问题。
l  题目同时给出该问题的某一解法的代码，但其中有缺失部分。
要求选手读懂代码逻辑，对其中的空缺部分补充代码，使整段代码完整。只填写空缺部分，不要填写完整句子。
不要写注释、说明或其它题目中未要求的内容。
5.3.  编程大题
题目为若干具有一定难度梯度、分值不等的编程题目。
这些题目的要求明确、答案客观。
题目一般要用到标准输入和输出。要求选手通过编程，对给定的标准输入求解，并通过标准输出，按题目要求的格式输出解。题目一般会给出示例数据。
一般题目的难度主要集中于对算法的设计和逻辑的组织上。理论上，选手不可能通过猜测或其它非编程的手段获得问题的解。
选手给出的解法应具有普遍性，不能只适用于题目的示例数据（当然，至少应该适用于题目的示例数据）。
为了测试选手给出解法的性能，评分时用的测试用例可能包含大数据量的压力测试用例，选手选择算法时要尽可能考虑可行性的问题。 
6.    试题涉及的基础知识

l  Java高职高专组
解题所涉及的知识：基本语法、面向对象、网络编程、接口、集合、IO、多线程、内部类、异常与保护，基本数据结构。（swing等图形界面不涉及，不涉及html、JSP、Tomcat、开源框架等web开发方面，不涉及JDBC、SQL等数据库编程方面）
解题允许使用的特性：JDK1.6支持的全部特性
l  Java本科B组
解题所涉及的知识：Java高职高专组全部知识 + 数据结构（高校《数据结构》教材中出现的经典结构，及其通过组合、变形、改良等方法创造出的变种）+ 大学程度的基本数学知识（含：解析几何、线性代数、微积分、概率、复平面基本性质）
解题允许使用的特性：同java高职高专组
l  Java本科A组
解题所涉及的知识：Java本科B组全部知识 + 设计模式，反射，XML，多核与并发，测试理论，Swing界面。
解题允许使用的特性：同java高职高专组
l  c/c++高职高专组
解题所涉及的知识：结构、数组、指针、标准输入输出、文件操作、递归、基本数据结构（在代码填空中不会出现c++知识，不会出现ANSI C之外的windows API调用）
解题允许使用的特性：选手可以使用c风格或c++风格或混合风格解答编程大题。
允许使用ANSI C++特性。允许使用STL类库。
l  c/c++本科B组 
解题所涉及的知识：c/c++高职高专组全部知识 + 数据结构（高校《数据结构》教材中出现的经典结构，及其通过组合、变形、改良等方法创造出的变种）、函数指针、位运算 + 大学程度的基本数学知识（含：解析几何、线性代数、微积分、概率、复平面基本性质）
解题允许使用的特性：同 c/c++高职高专组
l  c/c++本科A组 
解题所涉及的知识：c/c++本科B组全部知识 + 函数模板、复杂宏、汇编知识
解题允许使用的特性：同 c/c++高职高专组 
7.    评分

全程机器阅卷。必要环节有少量人工介入。
l  结果填空题：
答案唯一。
只有0分或满分（格式错误为0分）。
l  程序填空题：
按选手填写的代码代入程序中能否得出正确结果为判据。
测试数据与题面中的数据可能不同。
只有0分或满分（格式错误为0分）
c/c++组选错了编译器类型可能得0分。
l  编程大题：
主要以选手所提交的程序的运行结果为依据（大于95%）；同时会参考选手程序的编码风格、逻辑性、可读性等方面（小于5%）。
多个测试用例单独计分。通过则该用例得分。
c/c++选手选错了编译器类型可能得0分
c/c++选手主程序没有return 0 可能得0分。
java选手使用了package语句按0分处理。
java选手主类名字不是Main按0分处理。
其它题目中明确告知的规则如不遵守，都可能导致0分。 
8.    样题

【编程大题】花朵数
一个N位的十进制正整数，如果它的每个位上的数字的N次方的和等于这个数本身，则称其为花朵数。
例如：当N=3时，153就满足条件，因为 1^3 + 5^3 + 3^3 = 153，这样的数字也被称为水仙花数（其中，“^”表示乘方，5^3表示5的3次方，也就是立方）。
当N=4时，1634满足条件，因为 1^4 + 6^4 + 3^4 + 4^4 = 1634。
当N=5时，92727满足条件。
实际上，对N的每个取值，可能有多个数字满足条件。
程序的任务是：求N=21时，所有满足条件的花朵数。注意：这个整数有21位，它的各个位数字的21次方之和正好等于这个数本身。
如果满足条件的数字不只有一个，请从小到大输出所有符合条件的数字，每个数字占一行。因为这个数字很大，请注意解法时间上的可行性。要求程序在1分钟内运行完毕。
【程序运行参考结果】
128468643043731391252
449177399146038697307
 
【编程大题】信用卡号验证
当你输入信用卡号码的时候，有没有担心输错了而造成损失呢？其实可以不必这么担心，因为并不是一个随便的信用卡号码都是合法的，它必须通过Luhn算法来验证通过。
该校验的过程：
1、从卡号最后一位数字开始，逆向将奇数位(1、3、5等等)相加。
2、从卡号最后一位数字开始，逆向将偶数位数字，先乘以2（如果乘积为两位数，则将其减去9），再求和。
3、将奇数位总和加上偶数位总和，结果应该可以被10整除。
例如，卡号是：5432123456788881
则奇数、偶数位（用红色标出）分布：5432123456788881
奇数位和=35
偶数位乘以2（有些要减去9）的结果：1 6 2 6 1 5 7 7，求和=35。
最后35+35=70 可以被10整除，认定校验通过。
请编写一个程序，从标准输入获得卡号，然后判断是否校验通过。通过显示：“成功”，否则显示“失败”。
比如，用户输入：356827027232780
程序输出：成功
【程序测试参考用例】
356406010024817     成功
358973017867744     成功
356827027232781     失败
306406010024817     失败
358973017867754     失败
 
【c/c++组代码填空】
下列代码把一个串p复制到新的位置q。请填写缺少的语句；
char* p = "abcde";
char* q = (char*)malloc(strlen(p)+1);
for(int i=0;_____________; i++) q[i] = p[i];
q[i] = 0;
【参考答案】
p[i] 或 *(p+i) 或 p[i] != '\0' 或 ...
（答案不唯一，以选手提供代码带入专用验证程序测试为依据，验证程序比题面中提供的程序片段更严谨，更完善）
 
【Java组代码填空】
有n个孩子站成一圈，从第一个孩子开始顺时针方向报数，报到3的人出列，下一个人继续从1报数，直到最后剩下一个孩子为止。问剩下第几个孩子。下面的程序以10个孩子为例，模拟了这个过程，请完善之（提示：报数的过程被与之逻辑等价的更容易操作的过程所代替）。
Vector a = new Vector();
for(int i=1; i<=10; i++)
{
a.add("第" + i + "个孩子");
}
for(;;)
{
if(a.size()==1) break;
for(int k=0; k<2; k++)
________________;
a.remove(0);
}
System.out.println(a);
【参考答案】
a.add(a.remove(0))
（答案不唯一，以选手提供代码带入专用验证程序测试为依据，验证程序比题面中提供的程序片段更严谨，更完善）
 
【结果填空题】有趣的平方数
625这个数字很特别，625的平方等于390625，刚好其末3位是625本身。除了625，还有其它的3位数有这个特征吗？还有一个！该数是：_____________
【参考答案】
376 
9.    其它注意事项

（1）选手必须符合参赛资格，不得弄虚作假。资格审查中一旦发现问题，则取消其报名资格；竞赛过程中发现问题，则取消竞赛资格；竞赛后发现问题，则取消竞赛成绩，收回获奖证书及奖品等，并在大赛官网上公示。 
（2）参赛选手应遵守竞赛规则，遵守赛场纪律，服从大赛组委会的指挥和安排，爱护竞赛赛场地的设备。
（3）竞赛采用机器阅卷+少量人工辅助。选手需要特别注意提交答案的形式。必须仔细阅读题目的输入、输出要求以及示例，不要随意添加不需要的内容。
使用java语言时，注意主类名必须是：Main，不能使用package语句。
使用c/c++语言时，注意主函数需要return 0；
 
 
第五届大赛规则说明（软件） 
1.    组别

每个组别单独评奖
一本院校（985、211）只能报本科A组，其它本科院校可自行选择A组或B组。 
2.    选择c或c++

题面上不会考核c++或面向对象的具体知识
仅仅是编程大题允许使用c++解答，其它题目中不会出现c++知识
选手提交答案时，一定要注意选择c或c++（即编译器类型）。因为使用机器阅卷，很可能会因为选手选择了错误的编译器，而使自己代码无法编译通过。 
3.    c++涵盖范围

不会在给出的代码中含有类、对象等c++知识
不会在题目的描述中强制使用c++
对大题的解答允许使用c++编码
ANSI C++标准：
类，继承，多态….
允许使用STL类库，比如vector 
4.    java环境变化

本次java JDK环境指定为1.6（或称为6.0）
本次只提供了单一的开发工具：eclipse helios for JavaSE
当然，比赛系统只提交源代码，不提交工程文件，所以与使用的工具无关。
其它注意事项，请选手注意阅读考场上提供的《比赛环境说明》 
5.    c/c++环境变化

本次竞赛只使用单一的开发环境：dev-cpp 5.4
该环境无需安装，只要解压即可使用。
其它注意事项，请选手注意阅读考场上提供的《比赛环境说明》 
6.    各题型注意

结果填空：注意机器阅卷。不要书写任何的多余内容。
注意字母大小写、中英文符号的区分。 
代码填空题：注意机器阅卷。不要书写填空外的任何内容。
所填写代码会被机器代入测试用例进行编译和运行。
注意大小写，中英文符号的区分。
编程大题：注意机器阅卷。不要输出任何多余内容，严格按要求的格式。
一定要使用标准输入、输出，以便于机器重定向。
注意实际测试用例规模可能很大。 
7.    领域知识

除了编程语言的基础知识，大赛很少用到特定领域的知识。比如：电信、医药、地质、银行等特定领域。如果偶尔用到，会详细解释概念，并给出足够的示例。
但“数学领域”是个例外。大赛假定选手具有足够的中学数学知识。
具体包括：
l  算数：素数，整出，余数，求模，不定方程…
l  代数：函数，方程，多项式，…
l  解析几何：笛卡尔坐标系，点到直线的举例，极坐标，…
l  复数：模，夹角，矢量的合成和分解 
8.    题目难度

坚持原创性，押题不容易。
难度一般低于ACM，有些题目受NOI， IOI， POJ， ACM,  TopCode等知名赛事题目的启发。
注重普及性，让尽可能多的选手参赛本身可以获得启发或收获。大赛的目标之一：传播知识。
难度高于期末考试，更重要的是注重了趣味性。
不同于纯粹的语法考试，更注重在工程应用领域的意义。有些题目原型是高校或研究单位的论文成果。 
9.    往届赛题取材

数学素材，最普遍。
串的各种变换。java允许使用正则，可能会事半功倍。
文件内容的处理。文本文件转换格式，比较，搜索等。
二进制文件提取某种信息，某种映射。
仿真问题。类似电梯调用，餐厅调用等。
各种概率问题。
求最优解问题。
博弈问题。
 